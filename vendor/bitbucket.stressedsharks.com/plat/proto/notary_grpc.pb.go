// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotaryClient is the client API for Notary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotaryClient interface {
	// Write file contents to the blockchain.
	Write(ctx context.Context, in *NotaryWriteRequest, opts ...grpc.CallOption) (*NotaryFile, error)
	// Verify a file (i.e. hash its file contents and find the previous notarisation tx (if any))
	Verify(ctx context.Context, in *NotaryVerifyRequest, opts ...grpc.CallOption) (*NotaryFile, error)
	// Get the details of files belonging to this user, which match a given search term and date range.
	GetFilesDetails(ctx context.Context, in *NotaryGetFilesDetailsRequest, opts ...grpc.CallOption) (*NotaryFiles, error)
	// Get the file contents of a specific file where the file hash is known.
	GetFileContent(ctx context.Context, in *NotaryGetFileContentRequest, opts ...grpc.CallOption) (*NotaryFileContent, error)
}

type notaryClient struct {
	cc grpc.ClientConnInterface
}

func NewNotaryClient(cc grpc.ClientConnInterface) NotaryClient {
	return &notaryClient{cc}
}

func (c *notaryClient) Write(ctx context.Context, in *NotaryWriteRequest, opts ...grpc.CallOption) (*NotaryFile, error) {
	out := new(NotaryFile)
	err := c.cc.Invoke(ctx, "/proto.Notary/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) Verify(ctx context.Context, in *NotaryVerifyRequest, opts ...grpc.CallOption) (*NotaryFile, error) {
	out := new(NotaryFile)
	err := c.cc.Invoke(ctx, "/proto.Notary/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetFilesDetails(ctx context.Context, in *NotaryGetFilesDetailsRequest, opts ...grpc.CallOption) (*NotaryFiles, error) {
	out := new(NotaryFiles)
	err := c.cc.Invoke(ctx, "/proto.Notary/GetFilesDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) GetFileContent(ctx context.Context, in *NotaryGetFileContentRequest, opts ...grpc.CallOption) (*NotaryFileContent, error) {
	out := new(NotaryFileContent)
	err := c.cc.Invoke(ctx, "/proto.Notary/GetFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotaryServer is the server API for Notary service.
// All implementations must embed UnimplementedNotaryServer
// for forward compatibility
type NotaryServer interface {
	// Write file contents to the blockchain.
	Write(context.Context, *NotaryWriteRequest) (*NotaryFile, error)
	// Verify a file (i.e. hash its file contents and find the previous notarisation tx (if any))
	Verify(context.Context, *NotaryVerifyRequest) (*NotaryFile, error)
	// Get the details of files belonging to this user, which match a given search term and date range.
	GetFilesDetails(context.Context, *NotaryGetFilesDetailsRequest) (*NotaryFiles, error)
	// Get the file contents of a specific file where the file hash is known.
	GetFileContent(context.Context, *NotaryGetFileContentRequest) (*NotaryFileContent, error)
	mustEmbedUnimplementedNotaryServer()
}

// UnimplementedNotaryServer must be embedded to have forward compatible implementations.
type UnimplementedNotaryServer struct {
}

func (UnimplementedNotaryServer) Write(context.Context, *NotaryWriteRequest) (*NotaryFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedNotaryServer) Verify(context.Context, *NotaryVerifyRequest) (*NotaryFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedNotaryServer) GetFilesDetails(context.Context, *NotaryGetFilesDetailsRequest) (*NotaryFiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesDetails not implemented")
}
func (UnimplementedNotaryServer) GetFileContent(context.Context, *NotaryGetFileContentRequest) (*NotaryFileContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileContent not implemented")
}
func (UnimplementedNotaryServer) mustEmbedUnimplementedNotaryServer() {}

// UnsafeNotaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotaryServer will
// result in compilation errors.
type UnsafeNotaryServer interface {
	mustEmbedUnimplementedNotaryServer()
}

func RegisterNotaryServer(s grpc.ServiceRegistrar, srv NotaryServer) {
	s.RegisterService(&Notary_ServiceDesc, srv)
}

func _Notary_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Notary/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Write(ctx, req.(*NotaryWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Notary/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Verify(ctx, req.(*NotaryVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetFilesDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryGetFilesDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetFilesDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Notary/GetFilesDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetFilesDetails(ctx, req.(*NotaryGetFilesDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_GetFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryGetFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).GetFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Notary/GetFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).GetFileContent(ctx, req.(*NotaryGetFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Notary_ServiceDesc is the grpc.ServiceDesc for Notary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Notary",
	HandlerType: (*NotaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Notary_Write_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Notary_Verify_Handler,
		},
		{
			MethodName: "GetFilesDetails",
			Handler:    _Notary_GetFilesDetails_Handler,
		},
		{
			MethodName: "GetFileContent",
			Handler:    _Notary_GetFileContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notary.proto",
}
