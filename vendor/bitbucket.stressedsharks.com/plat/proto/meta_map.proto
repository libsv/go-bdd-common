syntax = "proto3";

import "key_context.proto";

package proto;

option go_package = "bitbucket.stressedsharks.com/plat/proto";

service MetaMap {
  // [INTERNAL] Returns the Metanet parent TxID for a specific context (alias & path).
  rpc Check(CheckRequest) returns (CheckResponse) {}
  // [INTERNAL] Stores the TxID of a Metanet node for a specific context (alias & path).
  rpc Store (StoreRequest) returns (StoreResponse) {}
  // [INTERNAL] Marks a TxID of a Metanet node at a specific blockchain height.
  rpc Mark (MarkRequest) returns (MarkResponse) {}
  // Returns the Metanet information at a specific context (alias & path).
  rpc Read (ReadRequest) returns (ReadResponse) {}
  // Subscribe to receive a stream of Metanet information related to a specific alias.
  rpc Subscribe (SubscribeRequest) returns (stream ReadResponse) {}
}

message CheckRequest {
  KeyContext key_context = 1;
}

message CheckResponse {
  string parent_txid = 1;
}

message StoreRequest {
  KeyContext key_context = 1;
  string txid = 2; // The transaction ID of the transaction that was successfully written to the bitcoin node.
}

// An empty response
message StoreResponse {}

message MarkRequest {
  string txid = 1; // The transaction ID of the transaction that was successfully written to the bitcoin node.
  uint32 block_height = 2; // Optional - the block height that this transaction was seen in.
}

// An empty response
message MarkResponse {}

message ReadRequest {
  KeyContext key_context = 1;
  bool include_data = 2; // If true, the actual data for this transaction will be returned
}

message ReadResponse {
  string txid = 1;
  bool marked = 2; // True indicates that this transaction has been seen on the blockchain
  uint32 block_height = 3; // The block height that this transaction is in, if it has been mined.
  bytes data = 4; // The data for this transaction.
  uint64 timestamp = 5; // The timestamp of this message
  string path = 6;
}

message SubscribeRequest {
  string alias = 1; // The alias that represents the private key to use.
  uint64 last_timestamp = 2; // The timestamp of the last successfully received ReadResponse.
}
