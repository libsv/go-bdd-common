// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaMapClient is the client API for MetaMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaMapClient interface {
	// [INTERNAL] Returns the Metanet parent TxID for a specific context (alias & path).
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	// [INTERNAL] Stores the TxID of a Metanet node for a specific context (alias & path).
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	// [INTERNAL] Marks a TxID of a Metanet node at a specific blockchain height.
	Mark(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*MarkResponse, error)
	// Returns the Metanet information at a specific context (alias & path).
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Subscribe to receive a stream of Metanet information related to a specific alias.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (MetaMap_SubscribeClient, error)
}

type metaMapClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaMapClient(cc grpc.ClientConnInterface) MetaMapClient {
	return &metaMapClient{cc}
}

func (c *metaMapClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/proto.MetaMap/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaMapClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/proto.MetaMap/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaMapClient) Mark(ctx context.Context, in *MarkRequest, opts ...grpc.CallOption) (*MarkResponse, error) {
	out := new(MarkResponse)
	err := c.cc.Invoke(ctx, "/proto.MetaMap/Mark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaMapClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/proto.MetaMap/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaMapClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (MetaMap_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetaMap_ServiceDesc.Streams[0], "/proto.MetaMap/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &metaMapSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MetaMap_SubscribeClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type metaMapSubscribeClient struct {
	grpc.ClientStream
}

func (x *metaMapSubscribeClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetaMapServer is the server API for MetaMap service.
// All implementations must embed UnimplementedMetaMapServer
// for forward compatibility
type MetaMapServer interface {
	// [INTERNAL] Returns the Metanet parent TxID for a specific context (alias & path).
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// [INTERNAL] Stores the TxID of a Metanet node for a specific context (alias & path).
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	// [INTERNAL] Marks a TxID of a Metanet node at a specific blockchain height.
	Mark(context.Context, *MarkRequest) (*MarkResponse, error)
	// Returns the Metanet information at a specific context (alias & path).
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Subscribe to receive a stream of Metanet information related to a specific alias.
	Subscribe(*SubscribeRequest, MetaMap_SubscribeServer) error
	mustEmbedUnimplementedMetaMapServer()
}

// UnimplementedMetaMapServer must be embedded to have forward compatible implementations.
type UnimplementedMetaMapServer struct {
}

func (UnimplementedMetaMapServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedMetaMapServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedMetaMapServer) Mark(context.Context, *MarkRequest) (*MarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mark not implemented")
}
func (UnimplementedMetaMapServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedMetaMapServer) Subscribe(*SubscribeRequest, MetaMap_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMetaMapServer) mustEmbedUnimplementedMetaMapServer() {}

// UnsafeMetaMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaMapServer will
// result in compilation errors.
type UnsafeMetaMapServer interface {
	mustEmbedUnimplementedMetaMapServer()
}

func RegisterMetaMapServer(s grpc.ServiceRegistrar, srv MetaMapServer) {
	s.RegisterService(&MetaMap_ServiceDesc, srv)
}

func _MetaMap_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaMapServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaMap/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaMapServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaMap_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaMapServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaMap/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaMapServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaMap_Mark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaMapServer).Mark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaMap/Mark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaMapServer).Mark(ctx, req.(*MarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaMap_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaMapServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaMap/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaMapServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaMap_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaMapServer).Subscribe(m, &metaMapSubscribeServer{stream})
}

type MetaMap_SubscribeServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type metaMapSubscribeServer struct {
	grpc.ServerStream
}

func (x *metaMapSubscribeServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MetaMap_ServiceDesc is the grpc.ServiceDesc for MetaMap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaMap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetaMap",
	HandlerType: (*MetaMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _MetaMap_Check_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _MetaMap_Store_Handler,
		},
		{
			MethodName: "Mark",
			Handler:    _MetaMap_Mark_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _MetaMap_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MetaMap_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meta_map.proto",
}
