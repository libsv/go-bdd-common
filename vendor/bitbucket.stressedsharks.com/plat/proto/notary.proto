syntax = "proto3";

package proto;

option go_package = "bitbucket.stressedsharks.com/plat/proto";

import "google/protobuf/timestamp.proto";
// import "google/api/annotations.proto";


/**
* The <b>Notary</b> is responsible for writing hashes of files to the blockchain.  
* In turn, it will delegate this request to the TransactionBuilder and return the txid that it gets back.
* It keeps a record of the filename, tx id and creation details in its database so that it can respond to search requests.
*/
service Notary {
  // Write file contents to the blockchain.
  rpc Write (NotaryWriteRequest) returns (NotaryFile) {
    // option (google.api.http) = {
    //   post: "/notary/write",
    //   body: "*"
    // };
  }

  // Verify a file (i.e. hash its file contents and find the previous notarisation tx (if any))
  rpc Verify (NotaryVerifyRequest) returns (NotaryFile) {
    // option (google.api.http) = {get: "/notary/verify"};
  }

  // Get the details of files belonging to this user, which match a given search term and date range.
  rpc GetFilesDetails (NotaryGetFilesDetailsRequest) returns (NotaryFiles) {
    // option (google.api.http) = {get: "/notary/files"}; //todo add search term and limit.
  }

  // Get the file contents of a specific file where the file hash is known.
  rpc GetFileContent (NotaryGetFileContentRequest) returns (NotaryFileContent) {}
}

// Notarise (hash) a file and write its hash to the blockchain.
message NotaryWriteRequest {
  uint32 account_id = 1; // Internal account id of the user making the request.
  bytes data = 2; // The data to be notarised (i.e. the file contents).
  string filename = 3; // The filename (will be written to notary db for later searching).
}

// A record of a file which has been notarised.
message NotaryFile {
  string hash = 1; // The hash string of the file contents for the notarised file.
  string txid = 2; // Transaction id where this file is notarised.
  string filename = 3; // Filename of the file we notarised (from the request).
  string contenttype = 4; // Mime type of the file e.g. text/plain.
  google.protobuf.Timestamp timecreated = 5; // When the file was notarised.
  uint32 blockheight = 6; // At which block height is the tx (0 if not known or not mined).
  uint32 confirmations = 7; // How many times is the tx confirmed (0 if not known or not mined).
}

// A request to verify that a given file contents have already been notarised.
message NotaryVerifyRequest {
  bytes data = 1; // The data to be verified (i.e. the file contents).
  uint32 account_id = 2; // Internal account id of the user making the request.
}

// A request to get the details of files belonging to this user which match a given search term and date range.
message NotaryGetFilesDetailsRequest {
  uint32 account_id = 1; // Internal account id of the user making the request (we search against their files only).
  string search = 2; // Search term (we search against tx hash and filename).
  google.protobuf.Timestamp createdFrom = 3; // Start date for our search.
  google.protobuf.Timestamp createdTo = 4; // End date for our search.
  uint32 limit = 5; // Limit records to return (sorted reverse date order).
}

// Get the file contents and details of a previously notarised file belonging to this user, where the file hash is known.
message NotaryGetFileContentRequest {
  uint32 account_id = 1; // Internal account id of the user making the request (we search against their files only).
  string file_hash = 2; // Hash of the file whose contents we want to retrieve.
}


// Respond to a request to get a notarised file's contents and details from its hash.
message NotaryFileContent {
  bytes file_content  = 1;  // Content of the notarised file.
  string filename = 2; // Filename of the notarised file.
  string contenttype = 3; // Mime type of the notarised file e.g. text/plain.
}

// A set of records of notarised files.
message NotaryFiles {
  repeated NotaryFile files = 1; // A file in the set.
}
