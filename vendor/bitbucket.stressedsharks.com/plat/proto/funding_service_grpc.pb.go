// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FundingServiceClient is the client API for FundingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundingServiceClient interface {
	// Get the available balance for the requested key.
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Add single fund to the funding service database.
	AddFund(ctx context.Context, in *AddFundRequest, opts ...grpc.CallOption) (*AddFundResponse, error)
	// Request and reserve one or more funds to cover the cost of a transaction.
	GetFunds(ctx context.Context, in *GetFundsRequest, opts ...grpc.CallOption) (*GetFundsResponse, error)
	// Spend the funds you previously requested (this will settle/broadcast them to the bloockchain).
	SpendFunds(ctx context.Context, in *SpendFundsRequest, opts ...grpc.CallOption) (*SpendFundsResponse, error)
	// Add funds and split the UTXO (Unspent Transaction Output).
	AddAndSplitFund(ctx context.Context, in *AddAndSplitFundRequest, opts ...grpc.CallOption) (*AddAndSplitFundResponse, error)
}

type fundingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundingServiceClient(cc grpc.ClientConnInterface) FundingServiceClient {
	return &fundingServiceClient{cc}
}

func (c *fundingServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/proto.FundingService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) AddFund(ctx context.Context, in *AddFundRequest, opts ...grpc.CallOption) (*AddFundResponse, error) {
	out := new(AddFundResponse)
	err := c.cc.Invoke(ctx, "/proto.FundingService/AddFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) GetFunds(ctx context.Context, in *GetFundsRequest, opts ...grpc.CallOption) (*GetFundsResponse, error) {
	out := new(GetFundsResponse)
	err := c.cc.Invoke(ctx, "/proto.FundingService/GetFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) SpendFunds(ctx context.Context, in *SpendFundsRequest, opts ...grpc.CallOption) (*SpendFundsResponse, error) {
	out := new(SpendFundsResponse)
	err := c.cc.Invoke(ctx, "/proto.FundingService/SpendFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingServiceClient) AddAndSplitFund(ctx context.Context, in *AddAndSplitFundRequest, opts ...grpc.CallOption) (*AddAndSplitFundResponse, error) {
	out := new(AddAndSplitFundResponse)
	err := c.cc.Invoke(ctx, "/proto.FundingService/AddAndSplitFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundingServiceServer is the server API for FundingService service.
// All implementations must embed UnimplementedFundingServiceServer
// for forward compatibility
type FundingServiceServer interface {
	// Get the available balance for the requested key.
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Add single fund to the funding service database.
	AddFund(context.Context, *AddFundRequest) (*AddFundResponse, error)
	// Request and reserve one or more funds to cover the cost of a transaction.
	GetFunds(context.Context, *GetFundsRequest) (*GetFundsResponse, error)
	// Spend the funds you previously requested (this will settle/broadcast them to the bloockchain).
	SpendFunds(context.Context, *SpendFundsRequest) (*SpendFundsResponse, error)
	// Add funds and split the UTXO (Unspent Transaction Output).
	AddAndSplitFund(context.Context, *AddAndSplitFundRequest) (*AddAndSplitFundResponse, error)
	mustEmbedUnimplementedFundingServiceServer()
}

// UnimplementedFundingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFundingServiceServer struct {
}

func (UnimplementedFundingServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedFundingServiceServer) AddFund(context.Context, *AddFundRequest) (*AddFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFund not implemented")
}
func (UnimplementedFundingServiceServer) GetFunds(context.Context, *GetFundsRequest) (*GetFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunds not implemented")
}
func (UnimplementedFundingServiceServer) SpendFunds(context.Context, *SpendFundsRequest) (*SpendFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendFunds not implemented")
}
func (UnimplementedFundingServiceServer) AddAndSplitFund(context.Context, *AddAndSplitFundRequest) (*AddAndSplitFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAndSplitFund not implemented")
}
func (UnimplementedFundingServiceServer) mustEmbedUnimplementedFundingServiceServer() {}

// UnsafeFundingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundingServiceServer will
// result in compilation errors.
type UnsafeFundingServiceServer interface {
	mustEmbedUnimplementedFundingServiceServer()
}

func RegisterFundingServiceServer(s grpc.ServiceRegistrar, srv FundingServiceServer) {
	s.RegisterService(&FundingService_ServiceDesc, srv)
}

func _FundingService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundingService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_AddFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).AddFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundingService/AddFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).AddFund(ctx, req.(*AddFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_GetFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).GetFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundingService/GetFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).GetFunds(ctx, req.(*GetFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_SpendFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).SpendFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundingService/SpendFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).SpendFunds(ctx, req.(*SpendFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundingService_AddAndSplitFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAndSplitFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundingServiceServer).AddAndSplitFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FundingService/AddAndSplitFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundingServiceServer).AddAndSplitFund(ctx, req.(*AddAndSplitFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FundingService_ServiceDesc is the grpc.ServiceDesc for FundingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FundingService",
	HandlerType: (*FundingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _FundingService_GetBalance_Handler,
		},
		{
			MethodName: "AddFund",
			Handler:    _FundingService_AddFund_Handler,
		},
		{
			MethodName: "GetFunds",
			Handler:    _FundingService_GetFunds_Handler,
		},
		{
			MethodName: "SpendFunds",
			Handler:    _FundingService_SpendFunds_Handler,
		},
		{
			MethodName: "AddAndSplitFund",
			Handler:    _FundingService_AddAndSplitFund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "funding_service.proto",
}
