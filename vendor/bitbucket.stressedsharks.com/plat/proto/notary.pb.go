// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: notary.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Notarise (hash) a file and write its hash to the blockchain.
type NotaryWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // Internal account id of the user making the request.
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                             // The data to be notarised (i.e. the file contents).
	Filename  string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`                     // The filename (will be written to notary db for later searching).
}

func (x *NotaryWriteRequest) Reset() {
	*x = NotaryWriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotaryWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotaryWriteRequest) ProtoMessage() {}

func (x *NotaryWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotaryWriteRequest.ProtoReflect.Descriptor instead.
func (*NotaryWriteRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{0}
}

func (x *NotaryWriteRequest) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *NotaryWriteRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NotaryWriteRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// A record of a file which has been notarised.
type NotaryFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`                    // The hash string of the file contents for the notarised file.
	Txid          string                 `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`                    // Transaction id where this file is notarised.
	Filename      string                 `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`            // Filename of the file we notarised (from the request).
	Contenttype   string                 `protobuf:"bytes,4,opt,name=contenttype,proto3" json:"contenttype,omitempty"`      // Mime type of the file e.g. text/plain.
	Timecreated   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timecreated,proto3" json:"timecreated,omitempty"`      // When the file was notarised.
	Blockheight   uint32                 `protobuf:"varint,6,opt,name=blockheight,proto3" json:"blockheight,omitempty"`     // At which block height is the tx (0 if not known or not mined).
	Confirmations uint32                 `protobuf:"varint,7,opt,name=confirmations,proto3" json:"confirmations,omitempty"` // How many times is the tx confirmed (0 if not known or not mined).
}

func (x *NotaryFile) Reset() {
	*x = NotaryFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotaryFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotaryFile) ProtoMessage() {}

func (x *NotaryFile) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotaryFile.ProtoReflect.Descriptor instead.
func (*NotaryFile) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{1}
}

func (x *NotaryFile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NotaryFile) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *NotaryFile) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *NotaryFile) GetContenttype() string {
	if x != nil {
		return x.Contenttype
	}
	return ""
}

func (x *NotaryFile) GetTimecreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Timecreated
	}
	return nil
}

func (x *NotaryFile) GetBlockheight() uint32 {
	if x != nil {
		return x.Blockheight
	}
	return 0
}

func (x *NotaryFile) GetConfirmations() uint32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

// A request to verify that a given file contents have already been notarised.
type NotaryVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                             // The data to be verified (i.e. the file contents).
	AccountId uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // Internal account id of the user making the request.
}

func (x *NotaryVerifyRequest) Reset() {
	*x = NotaryVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotaryVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotaryVerifyRequest) ProtoMessage() {}

func (x *NotaryVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotaryVerifyRequest.ProtoReflect.Descriptor instead.
func (*NotaryVerifyRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{2}
}

func (x *NotaryVerifyRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *NotaryVerifyRequest) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

// A request to get the details of files belonging to this user which match a given search term and date range.
type NotaryGetFilesDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // Internal account id of the user making the request (we search against their files only).
	Search      string                 `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`                         // Search term (we search against tx hash and filename).
	CreatedFrom *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdFrom,proto3" json:"createdFrom,omitempty"`               // Start date for our search.
	CreatedTo   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdTo,proto3" json:"createdTo,omitempty"`                   // End date for our search.
	Limit       uint32                 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                          // Limit records to return (sorted reverse date order).
}

func (x *NotaryGetFilesDetailsRequest) Reset() {
	*x = NotaryGetFilesDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotaryGetFilesDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotaryGetFilesDetailsRequest) ProtoMessage() {}

func (x *NotaryGetFilesDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotaryGetFilesDetailsRequest.ProtoReflect.Descriptor instead.
func (*NotaryGetFilesDetailsRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{3}
}

func (x *NotaryGetFilesDetailsRequest) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *NotaryGetFilesDetailsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *NotaryGetFilesDetailsRequest) GetCreatedFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedFrom
	}
	return nil
}

func (x *NotaryGetFilesDetailsRequest) GetCreatedTo() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTo
	}
	return nil
}

func (x *NotaryGetFilesDetailsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Get the file contents and details of a previously notarised file belonging to this user, where the file hash is known.
type NotaryGetFileContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // Internal account id of the user making the request (we search against their files only).
	FileHash  string `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`     // Hash of the file whose contents we want to retrieve.
}

func (x *NotaryGetFileContentRequest) Reset() {
	*x = NotaryGetFileContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotaryGetFileContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotaryGetFileContentRequest) ProtoMessage() {}

func (x *NotaryGetFileContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotaryGetFileContentRequest.ProtoReflect.Descriptor instead.
func (*NotaryGetFileContentRequest) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{4}
}

func (x *NotaryGetFileContentRequest) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *NotaryGetFileContentRequest) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

// Respond to a request to get a notarised file's contents and details from its hash.
type NotaryFileContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent []byte `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"` // Content of the notarised file.
	Filename    string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                          // Filename of the notarised file.
	Contenttype string `protobuf:"bytes,3,opt,name=contenttype,proto3" json:"contenttype,omitempty"`                    // Mime type of the notarised file e.g. text/plain.
}

func (x *NotaryFileContent) Reset() {
	*x = NotaryFileContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotaryFileContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotaryFileContent) ProtoMessage() {}

func (x *NotaryFileContent) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotaryFileContent.ProtoReflect.Descriptor instead.
func (*NotaryFileContent) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{5}
}

func (x *NotaryFileContent) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *NotaryFileContent) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *NotaryFileContent) GetContenttype() string {
	if x != nil {
		return x.Contenttype
	}
	return ""
}

// A set of records of notarised files.
type NotaryFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*NotaryFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"` // A file in the set.
}

func (x *NotaryFiles) Reset() {
	*x = NotaryFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotaryFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotaryFiles) ProtoMessage() {}

func (x *NotaryFiles) ProtoReflect() protoreflect.Message {
	mi := &file_notary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotaryFiles.ProtoReflect.Descriptor instead.
func (*NotaryFiles) Descriptor() ([]byte, []int) {
	return file_notary_proto_rawDescGZIP(), []int{6}
}

func (x *NotaryFiles) GetFiles() []*NotaryFile {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_notary_proto protoreflect.FileDescriptor

var file_notary_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0a,
	0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x74, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x74, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x32,
	0x9c, 0x02, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61,
	0x72, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x6f, 0x74, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x42, 0x29,
	0x5a, 0x27, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x73, 0x68, 0x61, 0x72, 0x6b, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_notary_proto_rawDescOnce sync.Once
	file_notary_proto_rawDescData = file_notary_proto_rawDesc
)

func file_notary_proto_rawDescGZIP() []byte {
	file_notary_proto_rawDescOnce.Do(func() {
		file_notary_proto_rawDescData = protoimpl.X.CompressGZIP(file_notary_proto_rawDescData)
	})
	return file_notary_proto_rawDescData
}

var file_notary_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_notary_proto_goTypes = []interface{}{
	(*NotaryWriteRequest)(nil),           // 0: proto.NotaryWriteRequest
	(*NotaryFile)(nil),                   // 1: proto.NotaryFile
	(*NotaryVerifyRequest)(nil),          // 2: proto.NotaryVerifyRequest
	(*NotaryGetFilesDetailsRequest)(nil), // 3: proto.NotaryGetFilesDetailsRequest
	(*NotaryGetFileContentRequest)(nil),  // 4: proto.NotaryGetFileContentRequest
	(*NotaryFileContent)(nil),            // 5: proto.NotaryFileContent
	(*NotaryFiles)(nil),                  // 6: proto.NotaryFiles
	(*timestamppb.Timestamp)(nil),        // 7: google.protobuf.Timestamp
}
var file_notary_proto_depIdxs = []int32{
	7, // 0: proto.NotaryFile.timecreated:type_name -> google.protobuf.Timestamp
	7, // 1: proto.NotaryGetFilesDetailsRequest.createdFrom:type_name -> google.protobuf.Timestamp
	7, // 2: proto.NotaryGetFilesDetailsRequest.createdTo:type_name -> google.protobuf.Timestamp
	1, // 3: proto.NotaryFiles.files:type_name -> proto.NotaryFile
	0, // 4: proto.Notary.Write:input_type -> proto.NotaryWriteRequest
	2, // 5: proto.Notary.Verify:input_type -> proto.NotaryVerifyRequest
	3, // 6: proto.Notary.GetFilesDetails:input_type -> proto.NotaryGetFilesDetailsRequest
	4, // 7: proto.Notary.GetFileContent:input_type -> proto.NotaryGetFileContentRequest
	1, // 8: proto.Notary.Write:output_type -> proto.NotaryFile
	1, // 9: proto.Notary.Verify:output_type -> proto.NotaryFile
	6, // 10: proto.Notary.GetFilesDetails:output_type -> proto.NotaryFiles
	5, // 11: proto.Notary.GetFileContent:output_type -> proto.NotaryFileContent
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_notary_proto_init() }
func file_notary_proto_init() {
	if File_notary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotaryWriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotaryFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotaryVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotaryGetFilesDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotaryGetFileContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotaryFileContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotaryFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notary_proto_goTypes,
		DependencyIndexes: file_notary_proto_depIdxs,
		MessageInfos:      file_notary_proto_msgTypes,
	}.Build()
	File_notary_proto = out.File
	file_notary_proto_rawDesc = nil
	file_notary_proto_goTypes = nil
	file_notary_proto_depIdxs = nil
}
