// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaWriterClient is the client API for MetaWriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaWriterClient interface {
	// Writes data in the Metanet structure at a specific path and returns the TxID once it has been written.
	MetaWrite(ctx context.Context, in *MetaWriteRequest, opts ...grpc.CallOption) (*MetaWriteResponse, error)
	// Writes data in the Metanet structure at a specific path.
	MetaWriteAsync(ctx context.Context, in *MetaWriteRequest, opts ...grpc.CallOption) (*Void, error)
}

type metaWriterClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaWriterClient(cc grpc.ClientConnInterface) MetaWriterClient {
	return &metaWriterClient{cc}
}

func (c *metaWriterClient) MetaWrite(ctx context.Context, in *MetaWriteRequest, opts ...grpc.CallOption) (*MetaWriteResponse, error) {
	out := new(MetaWriteResponse)
	err := c.cc.Invoke(ctx, "/proto.MetaWriter/MetaWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaWriterClient) MetaWriteAsync(ctx context.Context, in *MetaWriteRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.MetaWriter/MetaWriteAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaWriterServer is the server API for MetaWriter service.
// All implementations must embed UnimplementedMetaWriterServer
// for forward compatibility
type MetaWriterServer interface {
	// Writes data in the Metanet structure at a specific path and returns the TxID once it has been written.
	MetaWrite(context.Context, *MetaWriteRequest) (*MetaWriteResponse, error)
	// Writes data in the Metanet structure at a specific path.
	MetaWriteAsync(context.Context, *MetaWriteRequest) (*Void, error)
	mustEmbedUnimplementedMetaWriterServer()
}

// UnimplementedMetaWriterServer must be embedded to have forward compatible implementations.
type UnimplementedMetaWriterServer struct {
}

func (UnimplementedMetaWriterServer) MetaWrite(context.Context, *MetaWriteRequest) (*MetaWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaWrite not implemented")
}
func (UnimplementedMetaWriterServer) MetaWriteAsync(context.Context, *MetaWriteRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaWriteAsync not implemented")
}
func (UnimplementedMetaWriterServer) mustEmbedUnimplementedMetaWriterServer() {}

// UnsafeMetaWriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaWriterServer will
// result in compilation errors.
type UnsafeMetaWriterServer interface {
	mustEmbedUnimplementedMetaWriterServer()
}

func RegisterMetaWriterServer(s grpc.ServiceRegistrar, srv MetaWriterServer) {
	s.RegisterService(&MetaWriter_ServiceDesc, srv)
}

func _MetaWriter_MetaWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaWriterServer).MetaWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaWriter/MetaWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaWriterServer).MetaWrite(ctx, req.(*MetaWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaWriter_MetaWriteAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaWriterServer).MetaWriteAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetaWriter/MetaWriteAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaWriterServer).MetaWriteAsync(ctx, req.(*MetaWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaWriter_ServiceDesc is the grpc.ServiceDesc for MetaWriter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaWriter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetaWriter",
	HandlerType: (*MetaWriterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MetaWrite",
			Handler:    _MetaWriter_MetaWrite_Handler,
		},
		{
			MethodName: "MetaWriteAsync",
			Handler:    _MetaWriter_MetaWriteAsync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta_writer.proto",
}
